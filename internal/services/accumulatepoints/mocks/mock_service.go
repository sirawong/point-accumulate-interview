// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	accumulatepoints "github.com/sirawong/point-accumulate-interview/internal/services/accumulatepoints"
	gomock "go.uber.org/mock/gomock"
)

// MockAccumulatePointService is a mock of AccumulatePointService interface.
type MockAccumulatePointService struct {
	ctrl     *gomock.Controller
	recorder *MockAccumulatePointServiceMockRecorder
	isgomock struct{}
}

// MockAccumulatePointServiceMockRecorder is the mock recorder for MockAccumulatePointService.
type MockAccumulatePointServiceMockRecorder struct {
	mock *MockAccumulatePointService
}

// NewMockAccumulatePointService creates a new mock instance.
func NewMockAccumulatePointService(ctrl *gomock.Controller) *MockAccumulatePointService {
	mock := &MockAccumulatePointService{ctrl: ctrl}
	mock.recorder = &MockAccumulatePointServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccumulatePointService) EXPECT() *MockAccumulatePointServiceMockRecorder {
	return m.recorder
}

// ExecuteMultipleFiles mocks base method.
func (m *MockAccumulatePointService) ExecuteMultipleFiles(ctx context.Context, files []accumulatepoints.FileInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteMultipleFiles", ctx, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteMultipleFiles indicates an expected call of ExecuteMultipleFiles.
func (mr *MockAccumulatePointServiceMockRecorder) ExecuteMultipleFiles(ctx, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteMultipleFiles", reflect.TypeOf((*MockAccumulatePointService)(nil).ExecuteMultipleFiles), ctx, files)
}
