// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks_rule/mock_repository.go -package=mocks_rule
//

// Package mocks_rule is a generated GoMock package.
package mocks_rule

import (
	context "context"
	reflect "reflect"

	entity "github.com/sirawong/point-accumulate-interview/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRuleRepository is a mock of RuleRepository interface.
type MockRuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRuleRepositoryMockRecorder
	isgomock struct{}
}

// MockRuleRepositoryMockRecorder is the mock recorder for MockRuleRepository.
type MockRuleRepositoryMockRecorder struct {
	mock *MockRuleRepository
}

// NewMockRuleRepository creates a new mock instance.
func NewMockRuleRepository(ctrl *gomock.Controller) *MockRuleRepository {
	mock := &MockRuleRepository{ctrl: ctrl}
	mock.recorder = &MockRuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleRepository) EXPECT() *MockRuleRepositoryMockRecorder {
	return m.recorder
}

// GetActiveRules mocks base method.
func (m *MockRuleRepository) GetActiveRules(ctx context.Context, branchIDWithCategoryIDs map[string][]string) ([]entity.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRules", ctx, branchIDWithCategoryIDs)
	ret0, _ := ret[0].([]entity.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveRules indicates an expected call of GetActiveRules.
func (mr *MockRuleRepositoryMockRecorder) GetActiveRules(ctx, branchIDWithCategoryIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRules", reflect.TypeOf((*MockRuleRepository)(nil).GetActiveRules), ctx, branchIDWithCategoryIDs)
}

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
	isgomock struct{}
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// GetCustomers mocks base method.
func (m *MockCustomerRepository) GetCustomers(ctx context.Context, customerIDs []string) ([]entity.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomers", ctx, customerIDs)
	ret0, _ := ret[0].([]entity.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomers indicates an expected call of GetCustomers.
func (mr *MockCustomerRepositoryMockRecorder) GetCustomers(ctx, customerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockCustomerRepository)(nil).GetCustomers), ctx, customerIDs)
}

// UpdateBulkCustomers mocks base method.
func (m *MockCustomerRepository) UpdateBulkCustomers(ctx context.Context, updateCustomer []entity.UpdateCustomer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBulkCustomers", ctx, updateCustomer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBulkCustomers indicates an expected call of UpdateBulkCustomers.
func (mr *MockCustomerRepositoryMockRecorder) UpdateBulkCustomers(ctx, updateCustomer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBulkCustomers", reflect.TypeOf((*MockCustomerRepository)(nil).UpdateBulkCustomers), ctx, updateCustomer)
}
